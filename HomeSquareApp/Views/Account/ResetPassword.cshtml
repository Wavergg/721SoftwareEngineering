@model ResetPasswordViewModel

@{
    ViewData["Title"] = "Reset Password";
}

@section pageSpecificCss{
    <link rel="stylesheet" href="~/lib/css/resetPassword.css" />
}

<div class=" d-flex align-items-center justify-content-center bg-white flex-column mb-3 py-5">
    <div class="card p-5">
        <h1 class="mb-4 pt-4">Reset Password</h1>
        @*<div class="text-success">@ViewData["ResetMessage"]</div>*@
        <form asp-controller="Account" asp-action="ResetPassword" class="reset-form" id="resetForm">
            <div class="text-danger small" asp-validation-summary="All"></div>
            <input asp-for="Email" type="hidden" />
            <input asp-for="Token" type="hidden" />
            <div class="group">
                <label asp-for="Password" for="passwordReset" class="label mb-2">New Password</label>
                <input asp-for="Password" onchange="validatePassword(this.value,document.getElementById('passwordResetValidPrompt'))" id="passwordReset" type="password" class="input " data-type="password" autocomplete="new-password" required>

                <small id="passwordResetValidPrompt" class="small">
                    Password should contain atleast 8 characters, 1 alphanumeric character and 1 symbol
                </small>
            </div>
            <div class="group">
                <label asp-for="ConfirmPassword" for="confirmPasswordReset" class="label mb-2">Retype New Password</label>
                <input asp-for="ConfirmPassword" id="confirmPasswordReset" type="password" class="input " data-type="password" autocomplete="new-password" required>

                <span asp-validation-for="ConfirmPassword" id="confirmPasswordResetValidPrompt" class="text-danger form-text "></span>
            </div>
            <div class="group">
                <button type="button" id="submitResetFormBtn" onclick="submitResetForm()" class="button btn btn-success form-control">
                    Reset Password
                </button>
            </div>
            @* The real submit form, hidden. The top one would run validation first then trigger the form. *@
            <button type="submit" hidden id="formResetSubmitBtn">Submit Form</button>
        </form>
    </div>
</div>

@section Scripts{
    <script>
        var passwordResetInputElement = document.getElementById("passwordReset");
        var confirmPasswordResetInputElement = document.getElementById("confirmPasswordReset");

        document.getElementById("resetForm").addEventListener("keypress", function (e) {
            var keyCode = e.keyCode || e.which;
            if (keyCode === 13) {
                e.preventDefault();
                submitResetForm();
                return false;
            }
        })

        function submitResetForm() {
            //borrow validation from register view component
            if (checkEmptyValue(passwordResetInputElement) && checkEmptyValue(confirmPasswordResetInputElement)) {
                //make the other group visible and the current group not visible
                if (validatePassword(passwordResetInputElement.value, document.getElementById("passwordResetValidPrompt"))
                    && (passwordResetInputElement.value == confirmPasswordResetInputElement.value)) {

                    document.getElementById("formResetSubmitBtn").click();

                }
            }
        }
    </script>
}