@inject SignInManager<ApplicationUser> signInManager
@model HomeSquareApp.Models.Product

@{
    ViewData["Title"] = Model.ProductName;
    string priceAfterDiscount = string.Format("{0:F2}", (Model.ProductPrice - (Model.ProductPrice * Model.ProductDiscount)));
    string[] priceBase = priceAfterDiscount.Split('.');

    int dayOfWeek = ((int)DateTime.Now.DayOfWeek) == 0 ? 7 : (int)DateTime.Now.DayOfWeek;
    var previous1WeekSunday = @DateTime.Now.AddDays(-(dayOfWeek));
    var previous2WeekSunday = previous1WeekSunday.AddDays(-7);
    var previous3WeekSunday = previous2WeekSunday.AddDays(-7);
    var previous4WeekSunday = previous3WeekSunday.AddDays(-7);
    var previous5WeekSunday = previous4WeekSunday.AddDays(-7);

    //TEMP CHANGE IT LATER, NOT EFFICIENT TO PERFORM CALCULATION FOR EVERYTHING
    double TOTAL_REVIEW_COUNT = Model.ReviewFiveStarsCount + Model.ReviewFourStarsCount + Model.ReviewThreeStarsCount + Model.ReviewTwoStarsCount + Model.ReviewOneStarsCount;
    double AVERAGE_REVIEW_SCORE = (Model.ReviewFiveStarsCount * 5 + Model.ReviewFourStarsCount * 4 + Model.ReviewThreeStarsCount * 3 + Model.ReviewTwoStarsCount * 2 + Model.ReviewOneStarsCount) / TOTAL_REVIEW_COUNT;
    double SCORE_ROUNDED = Math.Round(AVERAGE_REVIEW_SCORE) - 1;
}

@section pageSpecificCss{
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="~/lib/Chart.js/Chart.css" />
    <link rel="stylesheet" href="~/lib/css/productDetails.css" />
    <link rel="stylesheet" href="~/lib/css/magnifier.css" />
}

<div class="py-5">
    <div class="d-flex align-items-center justify-content-center mb-3 pt-4">
        <div class="container flex-md-row d-md-flex justify-content-center">
            @* Product Card Image section *@
            <section class="magnifier-thumb-wrapper w-md-50 card bg-white border-0" style="height:auto">
                <img id="thumb" class="mx-3" src="~/lib/images/products/@Model.ImageUrl" alt="@Model.ProductName" style="object-fit:fill;background-repeat: no-repeat;" asp-append-version="true" />
                <span class="badge" style="border-bottom-left-radius:0;border-top-left-radius:inherit">Specials</span>
            </section>

            @* Product Information Section *@
            <section class="ps-md-5 w-md-50 pt-3 p-md-0">
                <h1>@Model.ProductName</h1>
                <p>@Model.Description</p>
                <div class="d-flex align-items-center mb-3">
                    <div>
                        @* Do price after discount, Split price and store it in different variable and do a razor field for whole number and decimal *@
                        <span class="product-price">$</span><span class="product-price">@priceBase[0]</span><sup class="product-price-decimal">@priceBase[1]</sup>
                        @* Price before discount *@
                        @if (Model.ProductStatus.ProductStatusName == "Sale" && Model.SaleEndDateTime <= DateTime.Now) {
                            <p>Was <span class="product-price-before-special">$@string.Format("{0:F2}", Model.ProductPrice)</span></p>
                        }
                    </div>
                    <div class="ms-auto">
                        @* Price per unit *@
                        <span class="fw-normal">@Model.ProductServingContent @Model.ServingType.ServingType</span>
                    </div>
                </div>
                <button class="btn btn-success form-control rounded-pill">Add To Cart</button>
                <a asp-controller="Checkout" asp-action="Index" class="my-3 btn btn-light border-secondary text-dark form-control rounded-pill">Check Out</a>
                @*<a href="#headingReview" class="btn btn-light text-dark rounded-pill">Review</a>*@
            </section>
        </div>
    </div>

    <div class="mt-5">
        <ul class="nav nav-tabs justify-content-center" id="productTab" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link " id="productInfo-tab" data-bs-toggle="tab" data-bs-target="#productInfo" type="button" role="tab" aria-controls="productInfo" aria-selected="false">Product Information</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="statiscic-tab" data-bs-toggle="tab" data-bs-target="#statiscic" type="button" role="tab" aria-controls="statiscic" aria-selected="false">Statistic</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="rating-tab" data-bs-toggle="tab" data-bs-target="#rating" type="button" role="tab" aria-controls="rating" aria-selected="true">Rating</button>
            </li>
        </ul>
        <div class="tab-content bg-transparent border-bottom" id="productTabContent" style="min-height:450px;">
            <div class="tab-pane fade" id="productInfo" role="tabpanel" aria-labelledby="productInfo-tab">
                <div class="container py-5">
                    <div class="row">
                        @*<dl>
                            <dt class="col-sm-3">Description lists</dt>
                            <dd class="col-sm-9">A description list is perfect for defining terms.</dd>

                            <dt class="col-sm-3">Term</dt>
                            <dd class="col-sm-9">
                                <p>Definition for the term.</p>
                                <p>And some more placeholder definition text.</p>
                            </dd>

                            <dt class="col-sm-3">Another term</dt>
                            <dd class="col-sm-9">This definition is short, so no extra paragraphs or anything.</dd>

                            <dt class="col-sm-3 text-truncate">Truncated term is truncated</dt>
                            <dd class="col-sm-9">This can be useful when space is tight. Adds an ellipsis at the end.</dd>

                            <dt class="col-sm-3">Nesting</dt>
                            <dd class="col-sm-9">
                                <dl class="row">
                                    <dt class="col-sm-4">Nested definition list</dt>
                                    <dd class="col-sm-8">I heard you like definition lists. Let me put a definition list inside your definition list.</dd>
                                </dl>
                            </dd>
                        </dl>*@
                        @if (Model.ProductInformation == null)
                        {
                            <p class="fst-italic"> 
                            Currently There Are No Information Regarding to The Product
                            </p>
                        } else
                        {
                            @Model.ProductInformation
                        }
                    </div>
                </div>
            </div>
            <div class="tab-pane fade" id="statiscic" role="tabpanel" aria-labelledby="statiscic-tab">
                <div class="container py-5">
                    <div class="row justify-content-center">
                        <div class="col-md-6 position-relative">
                            <div class="position-absolute bg-white shadow-lg w-100 h-100 start-0 end-0 text-center rounded-3" style="z-index:-1;transform:scale(1.1,1.1);">
                            </div>
                            <canvas width="360" height="240" id="myChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            <div class="tab-pane fade show active" id="rating" role="tabpanel" aria-labelledby="rating-tab">
                <div class="container py-5">
                    <span class="heading">User Rating</span>
                    @*<span class="fa fa-star checked"></span>
                    <span class="fa fa-star checked"></span>
                    <span class="fa fa-star checked"></span>
                    <span class="fa fa-star checked"></span>
                    <span class="fa fa-star"></span>*@
                    @for (int i = 0; i < 5; i++)
                    {
                        string className = "fa fa-star ";
                        if (i <= SCORE_ROUNDED)
                        {
                            className += "checked";
                        }
                        <span class="@className"></span>
                    }
                <p>@string.Format($"{ AVERAGE_REVIEW_SCORE:F2}") average based on @TOTAL_REVIEW_COUNT reviews.</p>
                <div class="row">
                    <div class="side">
                        <div>5 star </div>
                    </div>
                    <div class="middle">
                        <div class="bar-container">
                            @{
                                double fiveStarWidth;
                                try
                                {
                                    fiveStarWidth = (TOTAL_REVIEW_COUNT / Convert.ToDouble(Model.ReviewFiveStarsCount))*100;
                                }
                                catch
                                {
                                    fiveStarWidth = 0;
                                }
                            }
                            <div class="bar-5" style="width:@string.Format("{0}%",fiveStarWidth)"></div>
                        </div>
                    </div>
                    <div class="side right">
                        <div>@Model.ReviewFiveStarsCount</div>
                    </div>
                    <div class="side">
                        <div>4 star</div>
                    </div>
                    <div class="middle">
                        <div class="bar-container">
                            @{
                                double fourStarWidth;
                                try
                                {
                                    fourStarWidth = (TOTAL_REVIEW_COUNT / Convert.ToDouble(Model.ReviewFourStarsCount)) * 100;
                                }
                                catch
                                {
                                    fourStarWidth = 0;
                                }
                            }
                            <div class="bar-4" style="width:@string.Format("{0}%",fourStarWidth)"></div>
                        </div>
                    </div>
                    <div class="side right">
                        <div>@Model.ReviewFourStarsCount</div>
                    </div>
                    <div class="side">
                        <div>3 star</div>
                    </div>
                    <div class="middle">
                        <div class="bar-container">
                            @{
                                double threeStarWidth;
                                try
                                {
                                    threeStarWidth = (TOTAL_REVIEW_COUNT / Convert.ToDouble(Model.ReviewThreeStarsCount)) * 100;
                                }
                                catch
                                {
                                    threeStarWidth = 0;
                                }
                            }
                            <div class="bar-3" style="width:@string.Format("{0}%",threeStarWidth)"></div>
                        </div>
                    </div>
                    <div class="side right">
                        <div>@Model.ReviewThreeStarsCount</div>
                    </div>
                    <div class="side">
                        <div>2 star</div>
                    </div>
                    <div class="middle">
                        <div class="bar-container">
                            @{
                                double twoStarWidth;
                                try
                                {
                                    twoStarWidth = (TOTAL_REVIEW_COUNT / Convert.ToDouble(Model.ReviewTwoStarsCount)) * 100;
                                }
                                catch
                                {
                                    twoStarWidth = 0;
                                }
                            }
                            <div class="bar-2" style="width:@string.Format("{0}%",twoStarWidth)"></div>
                        </div>
                    </div>
                    <div class="side right">
                        <div>@Model.ReviewTwoStarsCount</div>
                    </div>
                    <div class="side">
                        <div>1 star</div>
                    </div>
                    <div class="middle">
                        <div class="bar-container">
                            @{
                                double oneStarWidth;
                                try
                                {
                                    oneStarWidth = (TOTAL_REVIEW_COUNT / Convert.ToDouble(Model.ReviewOneStarsCount)) * 100;
                                }
                                catch
                                {
                                    oneStarWidth = 0;
                                }
                            }
                            <div class="bar-1" style="width:@string.Format("{0}%",oneStarWidth)"></div>
                        </div>
                    </div>
                    <div class="side right">
                        <div>@Model.ReviewOneStarsCount</div>
                    </div>
                </div>
                </div>
            </div>
        </div>
    </div>

    <div class="container mt-5">
        <h2>Reviews</h2>
        @* NYD Use user role here *@
        @if (!signInManager.IsSignedIn(User))
        {
            <div>
                <a href="#" data-bs-toggle="modal" data-bs-target="#loginModal" class="text-primary fw-bold">Log in</a> to post review
            </div>
        }
        else
        {
            <div class="d-md-flex">
                <div class="px-md-5 px-4 py-md-4 pt-2 align-items-center d-flex">
                    <img src="~/lib/images/users/blank-profile.png" class="rounded-circle" style="height:50px;width:50px" />
                </div>
                <div class="flex-grow-1 ms-3">
                    <form action="">
                        <div class="stars">
                            <input class="star star-5" id="star-5" type="radio" name="star" />
                            <label class="star star-5" for="star-5"></label>
                            <input class="star star-4" id="star-4" type="radio" name="star" />
                            <label class="star star-4" for="star-4"></label>
                            <input class="star star-3" id="star-3" type="radio" name="star" />
                            <label class="star star-3" for="star-3"></label>
                            <input class="star star-2" id="star-2" type="radio" name="star" />
                            <label class="star star-2" for="star-2"></label>
                            <input class="star star-1" id="star-1" type="radio" name="star" />
                            <label class="star star-1" for="star-1"></label>
                        </div>
                        <div class="form-floating">
                            <textarea onkeyup="textAreaAdjust(this)" class="form-control" placeholder="Leave a comment here" id="floatingTextarea2" style="height: 100px"></textarea>
                            <label for="floatingTextarea2" class="text-muted">Enter Your Review</label>
                        </div>
                        <button class="btn btn-success mt-2">Submit Review</button>
                    </form>
                </div>
            </div>
        }
        <div class="text-muted">
            <hr class="" />
        </div>
        <div class="bg-light">
            @for (int i = 0; i < 3; i++)
            {
                <partial name="_reviewCardPartial" />
            }
        </div>
    </div>

</div>

@section Scripts {
    @* Script for line chart *@
    <script src="~/lib/Chart.js/Chart.js"></script>
    <script>
        var config = {
            type: 'line',
            data: {
                labels: [
                    '@previous5WeekSunday.ToString("dd MMM")',
                    '@previous4WeekSunday.ToString("dd MMM")',
                    '@previous3WeekSunday.ToString("dd MMM")',
                    '@previous2WeekSunday.ToString("dd MMM")',
                    '@previous1WeekSunday.ToString("dd MMM")',
                    '@DateTime.Now.ToString("dd MMM")'],
                datasets:
                    [{
                        lineTension: 0.1,
                        label: 'Amount of purchase',
                        fill: true,
                        backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                            //'rgba(193, 66, 146, 0.5)',
                        ],
                        borderColor: [
                            'rgba(255,0,0,0.6)',
                            //'rgba(126, 239, 104, 0.6)',
                            //'rgba(25, 115, 84, 0.4)',
                        ],
                        data: [
                            @Model.Week5PurchaseCount,
                            @Model.Week4PurchaseCount,
                            @Model.Week3PurchaseCount,
                            @Model.Week2PurchaseCount,
                            @Model.Week1PurchaseCount,
                            @Model.CurrentWeekPurchaseCount,
                        ],
                    }],
            },
            options: {
                responsive: true,
                //title: {
                //    display: true,
                //    text: 'Items bought per week'
                //},
                tooltips: {
                    mode: 'index',
                    intersect: false,
                },
                hover: {
                    mode: 'nearest',
                    intersect: true
                },
                scales: {
                    xAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'End of the week'
                        }
                    }],
                    yAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'Quantity'
                        }
                    }]
                }
            }
        };

        window.onload = function () {
            var ctx = document.getElementById('myChart').getContext('2d');
            window.myLine = new Chart(ctx, config);
        };
    </script>

    @* Script For magnifier on product,
        commented the zommable: true because it could be a bad HCI *@
    <script src="~/lib/js/event.js"></script>
    <script src="~/lib/js/magnifier.js"></script>
    <script>
        var evt = new Event(),
            m = new Magnifier(evt);
        m.attach({
            thumb: '#thumb',
            mode: 'inside',
            zoom: 2,
            /*zoomable: true*/
            onthumbenter: function () {
            },
            onthumbmove: function () {
            },
            onthumbleave: function () {
            },
        });
    </script>
    <script>
        function textAreaAdjust(element) {
            element.style.height = "1px";
            element.style.height = (25 + element.scrollHeight) + "px";
        }
    </script>
}