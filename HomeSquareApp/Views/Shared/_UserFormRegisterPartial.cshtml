@model RegisterViewModel

<form asp-controller="Account" asp-action="Register"
      method="post" data-ajax="true" data-ajax-loading="#modalLoader" data-ajax-complete="registerReturned" data-ajax-method="post" data-ajax-url="/Account/Register" id="signUpForm">
    <div id="signUpGroup1" class="">
        <small id="errorSignUpSummary" class="text-danger mb-3"></small>
        <div class="group">
            <label asp-for="Email" class="label">Email Address</label>
            <input asp-for="Email" id="emailSignup" type="email" class="input " required>
            <span asp-validation-for="Email" id="emailSignupValidPrompt" class="text-danger form-text "></span>
        </div>
        <div class="group">
            <label asp-for="Password" for="passwordSignup" class="label ">Password</label>
            <input asp-for="Password" onchange="validatePassword(this.value)" id="passwordSignup" type="password" class="input " data-type="password" autocomplete="new-password" required>

            <span id="passwordSignupValidPrompt" class="form-text ">
                Password should contain atleast 8 characters, 1 alphanumeric character and 1 symbol
            </span>
        </div>
        <div class="group">
            <label asp-for="ConfirmPassword" for="confirmPassSignup" class="label ">Repeat Password</label>
            <input asp-for="ConfirmPassword" id="confirmPasswordSignup" type="password" class="input " data-type="password" required>
            <span asp-validation-for="ConfirmPassword" id="confirmPasswordSignupValidPrompt" class="text-danger form-text "></span>
        </div>
        <div class="group">
            <button type="button" onclick="nextSignup()" class="btn btn-primary form-control rounded-pill">Next</button>
        </div>
    </div>
    <div id="signUpGroup2" class="d-none">
        <div class="group">
            <label asp-for="FirstName" for="firstNameSignup" class="label ">First Name</label>
            <input asp-for="FirstName" id="firstNameSignup" type="text" class="input " required>
            <span asp-validation-for="FirstName" class="text-danger form-text"></span>
        </div>
        <div class="group">
            <label asp-for="LastName" for="lastNameSignup" class="label ">Last Name</label>
            <input asp-for="LastName" id="lastNameSignup" type="text" class="input " required>
            <span asp-validation-for="LastName" class="text-danger form-text "></span>
        </div>
        <div class="group">
            <label asp-for="Address" for="addressSignup" class="label ">Address</label>
            <input asp-for="Address" id="addressSignup" type="text" class="input " required>
            <span asp-validation-for="Address" class="text-danger form-text "></span>
        </div>
        <div class="group">
            <label asp-for="PhoneNumber" for="phoneSignup" class="label ">Phone Number</label>
            <input asp-for="PhoneNumber" id="phoneSignup" type="text" class="input " required>
            <span asp-validation-for="PhoneNumber" class="text-danger form-text "></span>
        </div>
        <div class="form-check">
            <input onchange="confirmCheckBoxChange(this)" class="form-check-input" type="checkbox" id="confirmCheckChecked" required>
            <label id="labelConfirmCheckChecked" class="form-check-label form-text" for="confirmCheckChecked">
                I am ready to receive email to activate my account
            </label>
        </div>
        <div class="group mt-2">
            <button type="button" onclick="backSignup()" class="btn btn-light border border-dark form-control rounded-pill">Back</button>
        </div>
        <div class="group">
            <button type="button" onclick="submitSignupForm()" id="submitFormBtn" class="btn btn-primary form-control rounded-pill">
                Sign Up
            </button>
        </div>
        @* The real submit form, hidden. The top one would run validation first then trigger the form. *@
        <button type="submit" hidden id="formSubmitBtn">Submit Form</button>
    </div>
</form>

<script>

    var emailElement = document.getElementById('emailSignup');
    var passwordElement = document.getElementById('passwordSignup')
    var confirmPasswordElement = document.getElementById('confirmPasswordSignup');

    var firstNameElement = document.getElementById('firstNameSignup');
    var lastNameElement = document.getElementById('lastNameSignup');
    var addressElement = document.getElementById('addressSignup');
    var phoneElement = document.getElementById('phoneSignup');
    var signUpConfirmFormChecked = document.getElementById('confirmCheckChecked');

    //Stop bug from user being able to submit the signup form with double enter keypress and ignoring validation
    document.getElementById("signUpForm").addEventListener("keypress", function (e) {
        var keyCode = e.keyCode || e.which;
        if (keyCode === 13) {
            e.preventDefault();
            return false;
        }
    })

    //HANDLE SIGNUP AJAX JSON DATA THAT ARE RETURNED FROM CONTROLLER
    function registerReturned(data) {
        if (data.responseJSON.isSuccess) {
            document.getElementById('tab-1').click();
            var signUpConfirmationAlert = document.getElementById('signupConfirmationPrompt');
            //go to login panel and set the message on the top to be the result
            signUpConfirmationAlert.classList.remove('d-none');
            signUpConfirmationAlert.innerHTML = data.responseJSON.message[0];
            //clear the form
            $('#signUpForm')[0].reset();
        } else {
            //Create UL ELEMENT AND POPULATE IT BASED ON ERROR RETURNED
            var list = document.createElement('ul');
            for (var i = 0; i < data.responseJSON.message.length; i++) {
                // Create the list item:
                var item = document.createElement('li');

                // Set its contents:
                item.appendChild(document.createTextNode(data.responseJSON.message[i]));

                // Add it to the list:
                list.appendChild(item);
            }
            //CLEAR PREVIOUS ERROR SUMMARY
            document.getElementById("errorSignUpSummary").innerHTML = "";
            //REPOPULATE THE SUMMARY With list above
            document.getElementById("errorSignUpSummary").appendChild(list);
            openSignUp();
            backSignup();
        }
        //reenable user clicking
        $("#loginModal").removeClass("overlay");
        $("#closeModal").removeAttr("disabled");
    }

    //Submit Sign form event that are being called from formSubmitBtn click
    function submitSignupForm() {
        //Check if the user checked the checkmark or not
        if (!signUpConfirmFormChecked.checked) {
            labelConfirmCheckChecked.classList.add('text-danger');
            signUpConfirmFormChecked.classList.add('border-danger');
            return;
        }

        //validate input
        if (checkLength(firstNameElement, 64) && checkLength(lastNameElement, 64) &&
            checkLength(addressElement, 128) && checkEmptyValue(phoneElement, 64) &&
            validatePhone(phoneElement.value)) {
            document.getElementById("formSubmitBtn").click();
            //prevent user from clicking anywhere else when the form is submitted
            $("#loginModal").addClass("overlay");
            $("#closeModal").attr("disabled", true)
        }
    }

    function checkLength(element, maxLength) {
        if (!checkEmptyValue(element) || element.value.length > maxLength) {
            return false;
        }
        return true;
    }

    //go to the 2nd page of signup
    function nextSignup() {

        if (emailSignupValidPrompt.innerHTML.length == 0 && checkEmptyValue(emailElement) && checkEmptyValue(passwordElement) && checkEmptyValue(confirmPasswordElement)) {
            //make the other group visible and the current group not visible
            if (validateEmail(emailElement.value) && validatePassword(passwordElement.value) && validateRepeatPassword()) {
                document.getElementById('progressBarPrompt').innerHTML = "2/2";
                document.getElementById('progressBarLogin').style.width = "100%";
                document.getElementById('signUpGroup1').classList.add('d-none');
                document.getElementById('signUpGroup2').classList.remove('d-none');
            }
        }
        return;
    }

    function confirmCheckBoxChange(checkboxElement) {
        if (!checkboxElement.checked) {
            labelConfirmCheckChecked.classList.add('text-danger');
            signUpConfirmFormChecked.classList.add('border-danger');
        } else {
            labelConfirmCheckChecked.classList.remove('text-danger');
            signUpConfirmFormChecked.classList.remove('border-danger');
        }
    }

    //return true if value is not empty
    function checkEmptyValue(element) {
        if (!element.value) {
            element.classList.add('border');
            element.classList.add('border-danger');
            return false;
        }
        element.classList.remove('border');
        element.classList.remove('border-danger');
        return true;
    }

    //back to prev page on signup
    function backSignup() {
        document.getElementById('progressBarPrompt').innerHTML = "1/2";
        document.getElementById('progressBarLogin').style.width = "50%";
        document.getElementById('signUpGroup1').classList.remove('d-none');
        document.getElementById('signUpGroup2').classList.add('d-none');
    }

    function validateEmail(email) {
        const re = /^[a-zA-Z0-9\._\+\-]+@@[a-zA-Z0-9\.\-]+\.[A-Za-z]{2,4}$/;
        var result = re.test(String(email).toLowerCase());
        var el = document.getElementById('emailSignupValidPrompt');

        if (!result) {
            el.classList.add('text-danger');
            el.innerHTML = "Invalid email address";
            return false;
        } else {
            el.innerHTML = "";
            return true;
        }
    }

    function validatePhone(phone) {
        const re = /^[\+]?\(?[\+]?[0-9]{1,4}\)?[\- \.]?\(?[0-9]{2,4}[\-\. ]?[0-9]{2,4}[\-\. ]?[0-9]{0,6}?\)?$/;
        var result = re.test(String(phone).toLowerCase());

        if (!result) {
            //if bad
            return false;
        } else {
            //if good
            return true;
        }
    }

    function validatePassword(password) {
        const re = /^(?=.*[0-9])(?=.*[!@@#$%^&*])[a-zA-Z0-9!@@#$%^&*]{8,}$/;
        var result = re.test(String(password));
        var el = document.getElementById('passwordSignupValidPrompt');
        if (!result) {
            el.classList.remove('text-success');
            el.classList.add('text-danger');
            return false;
        }
        el.classList.remove('text-danger');
        el.classList.add('text-success');
        return true;
    }

    function validateRepeatPassword() {
        var passwordElement = document.getElementById('passwordSignup');
        var confirmPasswordElement = document.getElementById('confirmPasswordSignup');


        if (passwordElement.value != confirmPasswordElement.value) {
            confirmPasswordSignupValidPrompt.innerHTML = "Password and the confirmation did not match";
            return false;
        }
        confirmPasswordSignupValidPrompt.innerHTML = "";
        return true;
    }

    function openSignUp() {
        document.getElementById('tab-2').checked = true;
    }

    //toggle reset password page with login/signup page
    var count = 0;
    function togglePanel() {
        var loginPanel = document.getElementById('loginSignUpPanel')
        var passwordPanel = document.getElementById('passwordPanel')
        if (count % 2 == 0) {
            passwordPanel.removeAttribute('hidden');
            loginPanel.setAttribute('hidden', true);
        } else {
            loginPanel.removeAttribute('hidden');
            passwordPanel.setAttribute('hidden', true);
        }
        count++;
    }
</script>